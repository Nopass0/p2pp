// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  telegramId String   @unique
  username   String?
  firstName  String
  lastName   String?
  photoUrl   String?
  isAdmin    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sessions         Session[]
  adminActions     AdminAction[]
  gateCookies      GateCookie[]
  gateTransactions GateTransaction[]
  TronWallet       TronWallet?
  TronTransaction  TronTransaction[]

  @@index([telegramId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique // Session token
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  userId    Int // Admin who performed the action
  action    String // Description of the action
  target    String? // Target of the action (e.g., user ID)
  metadata  Json? // Additional action metadata
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AdminInviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  isUsed    Boolean   @default(false)
  usedById  Int?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
}

// Gate Models
model GateCookie {
  id          Int      @id @default(autoincrement())
  userId      Int
  cookie      String   @db.Text
  isActive    Boolean  @default(true)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GateTransaction {
  id              Int       @id @default(autoincrement())
  userId          Int
  transactionId   String    @unique // Gate transaction ID
  paymentMethodId Int
  wallet          String
  amountRub       Float
  amountUsdt      Float
  totalRub        Float
  totalUsdt       Float
  status          Int
  bankName        String?
  bankLabel       String?
  paymentMethod   String?
  course          Float?
  successCount    Int?
  successRate     Float?
  usdtBalance     String?
  rubBalance      String?
  approvedAt      DateTime?
  expiredAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionId])
}

// Add to your schema.prisma

model TronWallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  address   String // TRON wallet address
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions TronTransaction[]

  @@index([userId])
  @@index([address])
}

model TronTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  walletId     Int
  hash         String   @unique
  fromAddress  String
  toAddress    String
  amount       String // Using String for large numbers
  tokenDecimal Int
  tokenSymbol  String
  tokenName    String
  methodName   String?
  confirmed    Boolean
  timestamp    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet TronWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([hash])
  @@index([walletId])
}
