generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  telegramId           String?                @unique
  login                String                 @unique
  password             String
  username             String?
  firstName            String?
  lastName             String?
  middleName           String?
  photoUrl             String?
  passportPhoto        String?
  deposit              Float                  @default(0)
  commissionRate       Float?
  salaryPercentage     Float                  @default(0.5)
  initialBalance       Float?
  isAdmin              Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  tgAuthToken          String?
  geminiToken          String?
  currentTgPhone       String?
  adminActions         AdminAction[]
  AppVersion           AppVersion[]
  appeals              Appeal[]
  DeviceToken          DeviceToken[]
  comments             EmployeeComment[]
  employeeExpenses     EmployeeExpense[]
  gateCookies          GateCookie[]
  gateTransactions     GateTransaction[]
  GateTransactionOwner GateTransactionOwner[]
  P2PTransaction       P2PTransaction[]
  screenshots          Screenshot[]
  sessions             Session[]
  TelegramTransaction  TelegramTransaction[]
  TransactionMatch     TransactionMatch[]
  TronTransaction      TronTransaction[]
  TronWallet           TronWallet?
  activityLogs         UserActivityLog[]
  UserSession          UserSession[]
  WorkTime             WorkTime[]

  @@index([login])
  @@index([telegramId])
}

model UserActivityLog {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  windowName  String
  action      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  url         String?
  metadata    Json?
  createdAt   DateTime    @default(now())
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model Screenshot {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  filePath    String
  fileSize    Int
  width       Int
  height      Int
  createdAt   DateTime    @default(now())
  sentToUser  Boolean     @default(false)
  metadata    Json?
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model UserSession {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  startTime   DateTime    @default(now())
  endTime     DateTime?
  duration    Int?
  isActive    Boolean     @default(true)
  metadata    Json?
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([deviceId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  target    String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AdminInviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  isUsed    Boolean   @default(false)
  usedById  Int?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
}

model GateCookie {
  id          Int      @id @default(autoincrement())
  userId      Int
  cookie      String
  idexId      String?
  isActive    Boolean  @default(true)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, cookie])
}

model Income {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        String   // "SCAM" | "ERROR" | "Другое"
  currency    String   // "USDT" или "RUB"
  date        DateTime
  description String?
  isRecurring Boolean  @default(false)
  period      String?  // период повторения, например, в днях
  profit      Float?   // дополнительное поле для прибыли
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processed   Boolean  @default(false)
  returned    Boolean  @default(false)

  @@index([type])
}

model GateTransaction {
  id                   Int                    @id @default(autoincrement())
  userId               Int
  transactionId        String                 @unique
  paymentMethodId      Int
  wallet               String
  amountRub            Float
  amountUsdt           Float
  totalRub             Float
  totalUsdt            Float
  idexId               String?
  status               Int
  bankName             String?
  bankLabel            String?
  paymentMethod        String?
  course               Float?
  successCount         Int?
  successRate          Float?
  approvedAt           DateTime?
  expiredAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  attachments          Json?
  bankCode             String?
  traderId             Int?
  traderName           String?
  commissionRate       Float?
  initialBalance       Float?
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  GateTransactionOwner GateTransactionOwner[]
  Receipt              Receipt[]
  TransactionMatch     TransactionMatch[]

  @@index([userId, createdAt])
  @@index([transactionId])
}

model CustomMetric {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  formula     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  type        String   // "SCAM" | "ERROR" | "Другое"
  currency    String   // "USDT" или "RUB"
  date        DateTime
  description String?
  isIncome    Boolean  @default(false) // false = расход, true = доход
  isRecurring Boolean  @default(false)
  period      String?  // период повторения (в днях)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processed   Boolean  @default(false)

  @@index([type])
}

model TelegramTransaction {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  transactionId             Int      @unique
  type                      String
  createdAt                 DateTime
  updatedAt                 DateTime @updatedAt
  amount                    Float
  currency                  String
  status                    String
  gateway                   String
  username                  String?
  tg_id                     String?
  input_addresses           String?
  recipient_wallet_address  String?
  activated_amount          Float?
  photo_url                 String?
  details_for_user          String?
  pair_transaction_currency String?
  is_blocked                Boolean  @default(false)
  network                   String?
  cryptocurrency_exchange   String?
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionId])
}

model TronWallet {
  id           Int               @id @default(autoincrement())
  userId       Int               @unique
  address      String
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  transactions TronTransaction[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([address])
}

model TronTransaction {
  id           Int        @id @default(autoincrement())
  userId       Int
  walletId     Int
  hash         String     @unique
  fromAddress  String
  toAddress    String
  amount       String
  tokenDecimal Int
  tokenSymbol  String
  tokenName    String
  methodName   String?
  confirmed    Boolean
  timestamp    DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet       TronWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([hash])
  @@index([walletId])
}

model DeviceToken {
  id           Int               @id @default(autoincrement())
  userId       Int
  token        String            @unique
  deviceId     String
  name         String?
  lastUsed     DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  screenshots  Screenshot[]
  activityLogs UserActivityLog[]
  sessions     UserSession[]

  @@unique([userId, deviceId])
  @@index([token])
  @@index([deviceId])
}

model P2PTransaction {
  id               Int                @id @default(autoincrement())
  userId           Int
  telegramId       String
  status           String
  currentTgPhone   String?
  amount           Float
  totalRub         Float
  price            Float
  buyerName        String
  method           String
  tradeStats       String?
  completedAt      DateTime
  createdAt        DateTime           @default(now())
  processed        Boolean            @default(false)
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  TransactionMatch TransactionMatch[]

  @@unique([userId, telegramId])
  @@index([userId])
  @@index([telegramId])
}

model TransactionMatch {
  id              Int             @id @default(autoincrement())
  userId          Int
  p2pTxId         Int
  gateTxId        Int
  isAutoMatched   Boolean         @default(false)
  timeDifference  Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  GateTransaction GateTransaction @relation(fields: [gateTxId], references: [id], onDelete: Cascade)
  P2PTransaction  P2PTransaction  @relation(fields: [p2pTxId], references: [id], onDelete: Cascade)
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([p2pTxId, gateTxId])
  @@index([gateTxId])
  @@index([p2pTxId])
  @@index([userId, createdAt])
}

model Receipt {
  id              Int             @id @default(autoincrement())
  gateId          Int
  bankLabel       String?
  fileName        String
  fileSize        Int
  filePath        String
  isVerified      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  GateTransaction GateTransaction @relation(fields: [gateId], references: [id], onDelete: Cascade)

  @@index([gateId])
  @@index([isVerified])
}

model WorkTime {
  id        Int         @id @default(autoincrement())
  userId    Int
  duration  Float
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  report    WorkReport?
  user      User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model WorkReport {
  id         Int              @id @default(autoincrement())
  workTimeId Int              @unique
  content    String
  createdAt  DateTime         @default(now())
  workTime   WorkTime         @relation(fields: [workTimeId], references: [id])
  files      WorkReportFile[]
}

model WorkReportFile {
  id        Int        @id @default(autoincrement())
  reportId  Int
  filename  String
  path      String
  createdAt DateTime   @default(now())
  report    WorkReport @relation(fields: [reportId], references: [id])

  @@index([reportId])
}

model EmployeeExpense {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  currency    String
  type        String
  date        DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Appeal {
  id              Int      @id @default(autoincrement())
  userId          Int
  gateId          String
  status          String
  employeeComment String?
  adminComment    String?
  isFinalized     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([gateId])
}

model EmployeeComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AppVersion {
  id          Int      @id @default(autoincrement())
  version     String   @unique
  hash        String   @unique
  fileName    String
  downloadUrl String
  isMain      Boolean  @default(false)
  uploadedBy  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [uploadedBy], references: [id])

  @@index([version])
  @@index([isMain])
}

model GateTransactionOwner {
  id                Int             @id @default(autoincrement())
  userId            Int
  gateTransactionId Int
  matched           Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  GateTransaction   GateTransaction @relation(fields: [gateTransactionId], references: [id])
  User              User            @relation(fields: [userId], references: [id])

  @@unique([userId, gateTransactionId])
}
