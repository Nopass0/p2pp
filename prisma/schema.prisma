generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  telegramId          String                @unique
  username            String?
  firstName           String
  lastName            String?
  photoUrl            String?
  isAdmin             Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  tgAuthToken         String?
  geminiToken         String?
  adminActions        AdminAction[]
  DeviceToken         DeviceToken[]
  gateCookies         GateCookie[]
  gateTransactions    GateTransaction[]
  P2PTransaction      P2PTransaction[]
  screenshots         Screenshot[]
  sessions            Session[]
  TelegramTransaction TelegramTransaction[]
  TransactionMatch    TransactionMatch[]
  TronTransaction     TronTransaction[]
  TronWallet          TronWallet?
  activityLogs        UserActivityLog[]
  UserSession         UserSession[]

  @@index([telegramId])
}

model UserActivityLog {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  windowName  String
  action      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  url         String?
  metadata    Json?
  createdAt   DateTime    @default(now())
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model Screenshot {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  filePath    String
  fileSize    Int
  width       Int
  height      Int
  createdAt   DateTime    @default(now())
  sentToUser  Boolean     @default(false)
  metadata    Json?
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model UserSession {
  id          Int         @id @default(autoincrement())
  userId      Int
  deviceId    Int
  startTime   DateTime    @default(now())
  endTime     DateTime?
  duration    Int?
  isActive    Boolean     @default(true)
  metadata    Json?
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([deviceId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  target    String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AdminInviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  isUsed    Boolean   @default(false)
  usedById  Int?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
}

model GateCookie {
  id          Int      @id @default(autoincrement())
  userId      Int
  cookie      String
  isActive    Boolean  @default(true)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GateTransaction {
  id               Int                @id @default(autoincrement())
  userId           Int
  transactionId    String             @unique
  paymentMethodId  Int
  wallet           String
  amountRub        Float
  amountUsdt       Float
  totalRub         Float
  totalUsdt        Float
  status           Int
  bankName         String?
  bankLabel        String?
  paymentMethod    String?
  course           Float?
  successCount     Int?
  successRate      Float?
  approvedAt       DateTime?
  expiredAt        DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  attachments      Json?
  bankCode         String?
  traderId         Int?
  traderName       String?
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Receipt          Receipt[]
  TransactionMatch TransactionMatch[]

  @@index([userId, createdAt])
  @@index([transactionId])
}

model TelegramTransaction {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  transactionId             Int      @unique
  type                      String
  createdAt                 DateTime
  updatedAt                 DateTime @updatedAt
  amount                    Float
  currency                  String
  status                    String
  gateway                   String
  username                  String?
  tg_id                     String?
  input_addresses           String?
  recipient_wallet_address  String?
  activated_amount          Float?
  photo_url                 String?
  details_for_user          String?
  pair_transaction_currency String?
  is_blocked                Boolean  @default(false)
  network                   String?
  cryptocurrency_exchange   String?
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionId])
}

model TronWallet {
  id           Int               @id @default(autoincrement())
  userId       Int               @unique
  address      String
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  transactions TronTransaction[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([address])
}

model TronTransaction {
  id           Int        @id @default(autoincrement())
  userId       Int
  walletId     Int
  hash         String     @unique
  fromAddress  String
  toAddress    String
  amount       String
  tokenDecimal Int
  tokenSymbol  String
  tokenName    String
  methodName   String?
  confirmed    Boolean
  timestamp    DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet       TronWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([hash])
  @@index([walletId])
}

model DeviceToken {
  id           Int               @id @default(autoincrement())
  userId       Int
  token        String            @unique
  deviceId     String
  name         String?
  lastUsed     DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  screenshots  Screenshot[]
  activityLogs UserActivityLog[]
  sessions     UserSession[]

  @@unique([userId, deviceId])
  @@index([token])
  @@index([deviceId])
}

model P2PTransaction {
  id               Int                @id @default(autoincrement())
  userId           Int
  telegramId       String
  status           String
  amount           Float
  totalRub         Float
  price            Float
  buyerName        String
  method           String
  tradeStats       String?
  completedAt      DateTime
  createdAt        DateTime           @default(now())
  processed        Boolean            @default(false)
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  TransactionMatch TransactionMatch[]

  @@unique([userId, telegramId])
  @@index([userId])
  @@index([telegramId])
}

model TransactionMatch {
  id              Int             @id @default(autoincrement())
  userId          Int
  p2pTxId         Int
  gateTxId        Int
  isAutoMatched   Boolean         @default(false)
  timeDifference  Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  GateTransaction GateTransaction @relation(fields: [gateTxId], references: [id], onDelete: Cascade)
  P2PTransaction  P2PTransaction  @relation(fields: [p2pTxId], references: [id], onDelete: Cascade)
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([p2pTxId, gateTxId])
  @@index([gateTxId])
  @@index([p2pTxId])
  @@index([userId, createdAt])
}

model Receipt {
  id              Int             @id @default(autoincrement())
  gateId          Int
  bankLabel       String?
  fileName        String
  fileSize        Int
  filePath        String
  isVerified      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  GateTransaction GateTransaction @relation(fields: [gateId], references: [id], onDelete: Cascade)

  @@index([gateId])
  @@index([isVerified])
}
