// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")

}

model User {
  id          Int      @id @default(autoincrement())
  telegramId  String   @unique
  username    String?
  firstName   String
  lastName    String?
  photoUrl    String?
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tgAuthToken String?
  geminiToken String?

  // Relations
  sessions            Session[]
  adminActions        AdminAction[]
  gateCookies         GateCookie[]
  gateTransactions    GateTransaction[]
  TronWallet          TronWallet?
  TronTransaction     TronTransaction[]
  TelegramTransaction TelegramTransaction[]
  DeviceToken         DeviceToken[]
  activityLogs        UserActivityLog[]
  screenshots         Screenshot[]
  UserSession         UserSession[]
  P2PTransaction      P2PTransaction[]

  @@index([telegramId])
}

model UserActivityLog {
  id         Int       @id @default(autoincrement())
  userId     Int
  deviceId   Int // ID устройства/токена
  windowName String // Название окна/страницы
  action     String // Тип действия (открытие, закрытие, переход и т.д.)
  startTime  DateTime // Время начала действия
  endTime    DateTime? // Время окончания действия (для окон)
  duration   Int? // Длительность в секундах
  url        String? // URL если применимо
  metadata   Json? // Дополнительные данные о действии
  createdAt  DateTime  @default(now())

  // Связи
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model Screenshot {
  id         Int      @id @default(autoincrement())
  userId     Int
  deviceId   Int
  filePath   String // Путь к файлу
  fileSize   Int // Размер файла в байтах
  width      Int // Ширина скриншота
  height     Int // Высота скриншота
  createdAt  DateTime @default(now())
  sentToUser Boolean  @default(false)
  metadata   Json? // Дополнительная информация

  // Связи
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([deviceId])
}

model UserSession {
  id        Int       @id @default(autoincrement())
  userId    Int
  deviceId  Int
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // Длительность в секундах
  isActive  Boolean   @default(true)
  metadata  Json? // Информация о сессии (IP, браузер и т.д.)

  // Связи
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceToken DeviceToken @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([deviceId])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique // Session token
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model AdminAction {
  id        Int      @id @default(autoincrement())
  userId    Int // Admin who performed the action
  action    String // Description of the action
  target    String? // Target of the action (e.g., user ID)
  metadata  Json? // Additional action metadata
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AdminInviteCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  isUsed    Boolean   @default(false)
  usedById  Int?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
}

// Gate Models
model GateCookie {
  id          Int      @id @default(autoincrement())
  userId      Int
  cookie      String   @db.Text
  isActive    Boolean  @default(true)
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GateTransaction {
  id              Int       @id @default(autoincrement())
  userId          Int
  transactionId   String    @unique // Gate transaction ID
  paymentMethodId Int
  wallet          String
  amountRub       Float
  amountUsdt      Float
  totalRub        Float
  totalUsdt       Float
  status          Int
  bankName        String?
  bankLabel       String?
  paymentMethod   String?
  course          Float?
  successCount    Int?
  successRate     Float?
  usdtBalance     String?
  rubBalance      String?
  approvedAt      DateTime?
  expiredAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionId])
}

model TelegramTransaction {
  id                        Int      @id @default(autoincrement())
  userId                    Int
  transactionId             Int      @unique
  type                      String
  createdAt                 DateTime
  updatedAt                 DateTime @updatedAt
  amount                    Float
  currency                  String
  status                    String
  gateway                   String
  username                  String?
  tg_id                     String?
  input_addresses           String?
  recipient_wallet_address  String?
  activated_amount          Float?
  photo_url                 String?
  details_for_user          String?
  pair_transaction_currency String?
  is_blocked                Boolean  @default(false)
  network                   String?
  cryptocurrency_exchange   String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([transactionId])
}

model TronWallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  address   String // TRON wallet address
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions TronTransaction[]

  @@index([userId])
  @@index([address])
}

model TronTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  walletId     Int
  hash         String   @unique
  fromAddress  String
  toAddress    String
  amount       String // Using String for large numbers
  tokenDecimal Int
  tokenSymbol  String
  tokenName    String
  methodName   String?
  confirmed    Boolean
  timestamp    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet TronWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([hash])
  @@index([walletId])
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  deviceId  String // Уникальный идентификатор устройства
  name      String? // Имя устройства (опционально)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  activityLogs UserActivityLog[]
  screenshots  Screenshot[]
  sessions     UserSession[]

  @@unique([userId, deviceId])
  @@index([token])
  @@index([deviceId])
}

model P2PTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  telegramId  String // ID сделки в телеграме (#OS-XXXXXXXX)
  status      String // Статус сделки (Завершено, и т.д.)
  amount      Float // Сумма в USDT
  totalRub    Float // Сумма в рублях
  price       Float // Цена за 1 USDT
  buyerName   String // Имя покупателя
  method      String // Метод оплаты (например "СБП")
  tradeStats  String? // Статистика торгов (например "сделок: 4 • 100%")
  completedAt DateTime // Когда была завершена сделка
  createdAt   DateTime @default(now())
  processed   Boolean  @default(false) // Флаг обработки сделки
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, telegramId])
  @@index([userId])
  @@index([telegramId])
}
